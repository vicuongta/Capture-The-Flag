import cv2
import numpy as np

def repair_qr_code(input_path, output_path):
    # Load the damaged image
    img = cv2.imread(input_path)
    if img is None:
        raise ValueError("Could not load image - check the file path")

    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # --- Step 1: Repair Position Markers ---
    # Position marker coordinates (adjust these values according to your image)
    marker_size = 70  # Size in pixels (measure from intact markers)
    border = 10       # White border width
    inner = 20        # Inner black square size

    # Top-Right Marker Reconstruction
    height, width = img.shape[:2]
    top_right_x = width - marker_size - border  # Right edge minus marker size
    top_right_y = border  # Same as top-left marker's Y position

    # Draw position marker pattern
    cv2.rectangle(img, (top_right_x, top_right_y), 
                 (top_right_x + marker_size, top_right_y + marker_size), (0,0,0), -1)
    cv2.rectangle(img, (top_right_x + border, top_right_y + border),
                 (top_right_x + marker_size - border, top_right_y + marker_size - border),
                 (255,255,255), -1)
    cv2.rectangle(img, (top_right_x + inner, top_right_y + inner),
                 (top_right_x + marker_size - inner, top_right_y + marker_size - inner),
                 (0,0,0), -1)

    # --- Step 2: Remove Lines with Inpainting ---
    # Create mask for damaged lines
    _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV)
    mask = cv2.dilate(thresh, np.ones((3,3), np.uint8), iterations=2)

    # Inpaint damaged areas
    inpainted = cv2.inpaint(img, mask, inpaintRadius=3, flags=cv2.INPAINT_TELEA)

    # --- Step 3: Binarization ---
    _, binary = cv2.threshold(cv2.cvtColor(inpainted, cv2.COLOR_BGR2GRAY), 
                            0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

    # --- Save Results ---
    cv2.imwrite(output_path, binary)
    print(f"Repaired QR code saved to {output_path}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description='QR Code Repair Tool')
    parser.add_argument('-i', '--input', required=True, help='Damaged QR code image path')
    parser.add_argument('-o', '--output', default='repaired_qr.png', help='Output file path')
    args = parser.parse_args()

    repair_qr_code(args.input, args.output)